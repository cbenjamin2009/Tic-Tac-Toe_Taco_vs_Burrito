{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","dangerouslySetInnerHTML","__html","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","handleReset","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.02312677.chunk.js","sourcesContent":["import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\n//Changing from Class to Function \r\n//class Square extends React.Component {\r\nfunction Square(props) {\r\n    //State is managed by board\r\n    // return a button with class square that calls onClick and inputs the value passsed by props\r\n\r\n    // since it's a function and not a class, we don't need render() \r\n  //  render() {\r\n      // you can change this.props to props becuase it's passed in \r\n      // the onClick was also modified to directly call the sub-component of props \r\n      return (\r\n        <button className=\"square\" \r\n        onClick={props.onClick} dangerouslySetInnerHTML={{__html: props.value}}>   \r\n        </button>\r\n      );\r\n  //  }\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n      //create constructor to refactor state\r\n      //create array of 9 nulls in state \r\n      // xIsNext indicates whether is X or O \r\n      // removing state to promote it to Game component \r\n    //   constructor(props) {\r\n    //       super(props);\r\n    //       this.state = {\r\n    //           squares: Array(9).fill(null),\r\n    //           xIsNext: true,\r\n    //       }\r\n    //   }\r\n      //handleClick function to set the square to 'X' and update state \r\n     \r\n\r\n    renderSquare(i) {\r\n      return (\r\n      <Square \r\n      value={this.props.squares[i]}\r\n      onClick={() => this.props.onClick(i)}\r\n      />\r\n      );\r\n    }\r\n  \r\n    render() {\r\n    //   //const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    //   const winner = calculateWinner(this.state.squares);\r\n    //   let status\r\n    //   if (winner) {\r\n    //       status = 'Winner: ' + winner;\r\n    //   } else {\r\n    //       status = 'Next Player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    //   }\r\n  \r\n      return (\r\n        <div>\r\n          {/* <div className=\"status\">{status}</div> */}\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n      //lifting state up so Game manages state for child-components \r\n      constructor(props) {\r\n          super(props);\r\n          this.state = {\r\n              history: [{\r\n                  squares: Array(9).fill(null),\r\n              }],\r\n              stepNumber: 0,\r\n              xIsNext: true,\r\n          };\r\n      }\r\n\r\n      handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length -1];\r\n        //copy array from state to new state for modification (immutability)\r\n        const squares = current.squares.slice();\r\n        // if there is a winner then don't allow more clicks\r\n        if (calculateWinner(squares) || squares[i]){\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? '<i class=\"fad fa-taco\"></i>' : '<i class=\"fad fa-burrito\"></i>';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n          })\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        })\r\n    }\r\n\r\n    handleReset() {\r\n        this.setState({\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        //declare variables to get state \r\n        const history = this.state.history; \r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        //history moves \r\n        const moves = history.map((step, move) => {\r\n            const desc = move ? \r\n            'Go to move #' + move : 'Go to beginning';\r\n            return (\r\n                <li key={move}>\r\n                    <button className=\"historyButtons\" onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n\r\n         } \r\n        // else if (!winner){status = 'Cats Game '}\r\n        else {\r\n            status = 'Next Player: ' + (this.state.xIsNext ? '<i class=\"fad fa-taco\"></i>' : '<i class=\"fad fa-burrito\"></i>');\r\n        }\r\n      return (\r\n          <div className=\"fullGame\">\r\n              <h1>Taco vs Burrito</h1>\r\n              <h2>Tic-Tac-Toe</h2>\r\n\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board \r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div><button className=\"resetButton\" onClick={() => this.handleReset()}>Reset </button> </div>\r\n            <div className=\"status\" dangerouslySetInnerHTML={{ __html: status }}></div>\r\n            <ol className=\"movesOl\">Move History: {moves}</ol>\r\n          </div>\r\n        </div>\r\n                  </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  \r\n\r\n  function calculateWinner(squares) {\r\n      const lines = [\r\n          [0, 1, 2],\r\n          [3, 4, 5],\r\n          [6, 7, 8],\r\n          [0, 3, 6], \r\n          [1, 4, 7],\r\n          [2, 5, 8],\r\n          [0, 4, 8],\r\n          [2, 4, 6],\r\n      ];\r\n\r\n      for (let i = 0; i<lines.length; i++){\r\n          const [a, b, c] = lines[i];\r\n          if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\r\n              return squares[a]\r\n          }\r\n\r\n      }\r\n      return null;\r\n  }\r\n\r\n  \r\n \r\n"],"sourceRoot":""}